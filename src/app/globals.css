@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
  --pet-purple: #8a4fff;
  --pet-purple-light: #b69eff;
  --pet-yellow: #ffc045;
  --pet-teal: #3ccac8;
  --pet-pink: #ff6b98;
  --pet-blue: #4f8eff;
  --pet-green: #4acf7f;
  --pet-bg: #f8f9ff;
  --pet-gray: #667085;
  --pet-card-bg: #ffffff;
  --pet-card-shadow: rgba(138, 79, 255, 0.1);
  --pet-card-shadow-hover: rgba(138, 79, 255, 0.15);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
    --pet-purple: #a675ff;
    --pet-purple-light: #b69eff;
    --pet-bg: #121212;
    --pet-gray: #a0aec0;
    --pet-card-bg: #1a1a1a;
    --pet-card-shadow: rgba(138, 79, 255, 0.2);
    --pet-card-shadow-hover: rgba(138, 79, 255, 0.3);
  }

  /* Ensure proper contrast for colored text in dark mode */
  .text-pet-gray {
    color: var(--pet-gray);
  }

  .bg-white {
    background-color: var(--pet-card-bg);
  }

  .bg-red-50 {
    background-color: rgba(220, 38, 38, 0.1);
  }

  /* Add better contrast for form inputs */
  input, textarea, select {
    color: var(--foreground);
    background-color: var(--pet-card-bg);
    border-color: #2d3748;
  }

  input::placeholder, textarea::placeholder {
    color: #6b7280;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

.pet-pattern-bg {
  background-color: var(--pet-bg);
  background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%238a4fff' fill-opacity='0.05'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
}

@media (prefers-color-scheme: dark) {
  .pet-pattern-bg {
    background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23a675ff' fill-opacity='0.1'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
  }
}

.paw-button {
  position: relative;
  overflow: hidden;
  transition: all 0.3s ease;
}

.paw-button::before {
  content: "üêæ";
  position: absolute;
  top: 50%;
  left: -20px;
  transform: translateY(-50%);
  opacity: 0;
  transition: all 0.3s ease;
}

.paw-button:hover::before {
  left: 10px;
  opacity: 1;
}

.paw-button:hover {
  padding-left: 40px;
}

.pet-card {
  border-radius: 16px;
  background-color: var(--pet-card-bg);
  box-shadow: 0 4px 20px var(--pet-card-shadow);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.pet-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 25px var(--pet-card-shadow-hover);
}

@keyframes bounce {
  0%, 100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-10px);
  }
}

.pet-bounce {
  animation: bounce 2s ease infinite;
}

.pet-gradient-text {
  background: linear-gradient(90deg, var(--pet-purple) 0%, var(--pet-pink) 50%, var(--pet-teal) 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  color: transparent;
}

.text-pet-gray {
  color: var(--pet-gray);
}

.text-pet-purple {
  color: var(--pet-purple);
}

.text-pet-pink {
  color: var(--pet-pink);
}

.text-pet-teal {
  color: var(--pet-teal);
}

.pet-input {
  border-radius: 12px;
  border: 2px solid #e2e8f0;
  padding: 10px 16px;
  transition: all 0.3s ease;
}

@media (prefers-color-scheme: dark) {
  .pet-input {
    border-color: #2d3748;
    background-color: #1a1a1a;
    color: var(--foreground);
  }
}

.pet-input:focus {
  border-color: var(--pet-purple);
  box-shadow: 0 0 0 3px rgba(138, 79, 255, 0.2);
}

.paw-tabs button {
  position: relative;
}

.paw-tabs button::after {
  content: "";
  position: absolute;
  bottom: -2px;
  left: 0;
  width: 100%;
  height: 2px;
  background: var(--pet-purple);
  transform: scaleX(0);
  transition: transform 0.3s ease;
}

.paw-tabs button.active::after,
.paw-tabs button:hover::after {
  transform: scaleX(1);
}

.paw-tabs button.active {
  color: var(--pet-purple);
}

/* Loading paw prints animation */
.paw-loading {
  display: flex;
  align-items: center;
  justify-content: center;
}

.paw-loading span {
  display: inline-block;
  width: 10px;
  height: 10px;
  margin: 0 5px;
  background-color: var(--pet-purple);
  border-radius: 50%;
  opacity: 0.2;
  animation: paw-loading 1.4s ease-in-out infinite;
}

.paw-loading span:nth-child(2) {
  animation-delay: 0.2s;
}

.paw-loading span:nth-child(3) {
  animation-delay: 0.4s;
}

.paw-loading span:nth-child(4) {
  animation-delay: 0.6s;
}

.paw-loading span:nth-child(5) {
  animation-delay: 0.8s;
}

@keyframes paw-loading {
  0%, 100% {
    opacity: 0.2;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.5);
  }
}

/* Gemini-style loading overlay animations */
@keyframes blob {
  0% {
    transform: translate(0px, 0px) scale(1);
  }
  33% {
    transform: translate(30px, -50px) scale(1.1);
  }
  66% {
    transform: translate(-20px, 20px) scale(0.9);
  }
  100% {
    transform: translate(0px, 0px) scale(1);
  }
}

.animate-blob {
  animation: blob 7s infinite;
}

.animation-delay-2000 {
  animation-delay: 2s;
}

.animation-delay-3000 {
  animation-delay: 3s;
}

.animation-delay-4000 {
  animation-delay: 4s;
}

.animation-delay-200 {
  animation-delay: 0.2s;
}

.animation-delay-400 {
  animation-delay: 0.4s;
}

/* Add mix-blend-multiply support */
.mix-blend-multiply {
  mix-blend-mode: multiply;
}

@media (prefers-color-scheme: dark) {
  .mix-blend-multiply {
    mix-blend-mode: screen;
  }
}

/* Add filter blur support */
.filter {
  filter: var(--tw-filter);
}

.blur-xl {
  --tw-blur: blur(24px);
  filter: var(--tw-blur);
}

/* Spin animation */
@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.animate-spin {
  animation: spin 3s linear infinite;
}
